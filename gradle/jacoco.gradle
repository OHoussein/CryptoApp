apply plugin: 'jacoco'

private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.dynamic-feature')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}

afterEvaluate { project ->
    if (isAndroidModule(project))
        setupAndroidReporting()
    else
        setupKotlinReporting()
}


def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses true
        jacoco.excludes = ['jdk.internal.*']
    }

    def sourceName = "debug"
    def testTaskName = "testDebugUnitTest"
    def jacocoTaskName = "${testTaskName}Coverage"

    tasks.create(name: jacocoTaskName, type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
        def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
        classDirectories.from = files([javaTree], [kotlinTree])
        executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
        def coverageSourceDirs = [
                "src/main/java",
                "src/debug/java",
                "src/release/java",
        ]

        sourceDirectories.setFrom(files(coverageSourceDirs))
        additionalSourceDirs.setFrom(files(coverageSourceDirs))

        reports {
            csv.enabled false
            xml.enabled true
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn "test"

        reports {
            csv.enabled false
            xml.enabled true
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
        afterEvaluate {
            classDirectories.from = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: fileFilter)
            })
        }

        doFirst {
            println("Wiss: run kotlin reporting")
        }
    }
}

ext.fileFilter = [
        //app
        '**/model/**',
        '**/presentation/components/**',
        '**/activity/**',
        '**/presentation/debug/**',

        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/Lambda$*.class',
        '**/Lambda.class',
        '**/*Lambda.class',
        '**/*Lambda*.class',
        '**/*_MembersInjector.class',
        '**/Dagger*Component*.*',
        '**/*Module_*Factory.class',
        '**/di/module/*',
        '**/*_Factory*.*',
        '**/*_GeneratedInjector*.*',
        '**/*Module*.*',
        '**/*Dagger*.*',
        '**/*Hilt*.*',
        // kotlin
        '**/*MapperImpl*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/*Component*.*',
        '**/*BR*.*',
        '**/Manifest*.*',
        '**/*$Lambda$*.*',
        '**/*Companion*.*',
        '**/*Module*.*',
        '**/*Dagger*.*',
        '**/*Hilt*.*',
        '**/*MembersInjector*.*',
        '**/*_MembersInjector.class',
        '**/*_Factory*.*',
        '**/*_Provide*Factory*.*',
        '**/*Extensions*.*'
]
